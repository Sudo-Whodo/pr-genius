name: Release
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pr-diff-bot/requirements.txt

      - name: Build Docker image
        run: docker build -t pr-diff-analyzer .

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}
    outputs:
      new_version: ${{ steps.version.outputs.NEW_VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get Next Version
        id: version
        run: |
          # Get current version from __init__.py
          CURRENT_VERSION=$(grep -oP '__version__ = "\K[^"]+' pr-diff-bot/__init__.py)
          echo "Current version: $CURRENT_VERSION"

          # Get commit messages since last tag
          COMMITS=$(git log --format=%B $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          echo "Commits since last tag:"
          echo "$COMMITS"

          # Check for fix commits
          if echo "$COMMITS" | grep -q "^fix:"; then
            # Calculate patch version
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            NEW_VERSION="$major.$minor.$((patch + 1))"
          else
            NEW_VERSION=$(semantic-release version --print)
          fi

          if [ -z "$NEW_VERSION" ]; then
            echo "No new version to release"
            exit 0
          fi

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Branch and Update Version
        if: steps.version.outputs.NEW_VERSION != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          BRANCH="release-${{ steps.version.outputs.NEW_VERSION }}-$(date +%s)"
          git checkout -b $BRANCH

          # Update version in __init__.py
          sed -i "s/__version__ = .*/__version__ = \"${{ steps.version.outputs.NEW_VERSION }}\"/" pr-diff-bot/__init__.py

          git add .
          git commit -m "chore(release): ${{ steps.version.outputs.NEW_VERSION }}"
          echo "RELEASE_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.version.outputs.NEW_VERSION != ''
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git push -f origin $RELEASE_BRANCH
          gh pr create \
            --title "chore(release): ${{ steps.version.outputs.NEW_VERSION }}" \
            --body "Automated release PR" \
            --base main \
            --head $RELEASE_BRANCH

  publish:
    needs: [build, release]
    if: needs.release.outputs.new_version != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get lowercase repository name
        id: repo_name
        run: |
          echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/${{ steps.repo_name.outputs.repo }}:latest
            ghcr.io/${{ steps.repo_name.outputs.repo }}:${{ needs.release.outputs.new_version }}
